.TH Printf 3 "30 July 2019" "0.32" "Holberton Printf man page"

.SH NAME

.B printf

.SH SYNOPSIS

#include <stdio.h>
.PP
int _printf(const char *format, ...);

.SH DESCRIPTION

The functions in the printf() family produce output according to a format as described below.  The functions printf() and vprintf() write output to stdout, the standard output stream write the output under the control of a format string that specifies how subsequent arguments (or arguments accessed via the variable-length argument facilities of stdarg(3)) are converted for output.

.B Format of the format string

The format string is a character string, beginning and ending in its initial shift state, if any.  The format string is composed of zero or more directives: ordinary characters (not %), which are copied unchanged to the output stream; and conversion specifications, each of which results in fetching zero or more subsequent arguments.  Each conversion specification is introduced by the character %, and ends with a conversion specifier.
.PP
The arguments must correspond properly (after type promotion) with the conversion specifier.  By default, the arguments are used in the order given, where each '*' and each conversion specifier asks for the next argument (and it is an error if insufficiently many arguments are given).

.B Conversion specifiers
.PP
The character % is followed by zero or more of the following Conversion Specifiers that specifies the type of conversion to be applied.  The conversion specifiers and their meanings are:
.PP
.RS
.B d, i
The int argument is converted to signed decimal notation.  The precision, if any, gives the minimum number of digits that must appear; if the converted value requires fewer digits, it is padded on the left with zeros.  The default precision is 1. When 0 is printed with an explicit precision 0, the output is empty.
.RE
.PP
.RS
.B c
The int argument is converted to an unsigned char, and the resulting character is written.
.RE
.PP
.RS
.B s
If no l modifier is present: the const char * argument is expected to be a pointer to an array of character type (pointer to a string).  Characters from the array are written up to (but not including) a terminating null byte ('\0');
.RE
.PP
.RS
.B H
This very powerful option uses advanced DevOps techniques to immediately Containerize the listed argument and integrate it into bleeding-edge CI/CD pipeline using the newest Kubernetes beta and a version of Jenkins that is written in Romanian.  It will do this, of course, with perfect compilation (using all of the flags) and zero bugs.  It will also, if asked politely, will provide directions to the best burrito spot in SOMA.
.RE
.SH RETURN VALUE
Upon successful return, these functions return the number of characters printed (excluding the null byte used to end output to strings).
.PP
If an output error is encountered, a negative value is returned.

.SH SEE ALSO

.I lackofsleep(2), MOREcaffine(2), peerlearning(2), Betty(1)

.SH BUGS

No known bugs. We are unwilling to consider unknown bugs.

.SH AUTHOR

Edward Guillermo and Brendan Eliason